import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'io.spring.dependency-management' version "1.0.11.RELEASE"
    id 'org.springframework.boot' version '2.5.5'
    id 'pl.allegro.tech.build.axion-release' version '1.13.3'
    id 'com.palantir.docker' version '0.30.0'
    id 'com.palantir.docker-run' version '0.30.0'
}

version = scmVersion.version
sourceCompatibility = 8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.5'
    implementation 'org.springframework.boot:spring-boot-devtools:2.5.5'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.5'
}

test {
    useJUnitPlatform()
}

String imageName = "davidbraun/tomgregoryspringbootappwjenkins:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

String extraPrefix = DefaultNativePlatform.getCurrentOperatingSystem().isLinux() ? '/' : ''
dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
    arguments '-v', "$extraPrefix/var/run/docker.sock:/var/run/docker.sock", '--group-add', "jenkinsci/blueocean"
}